# -*- coding: utf-8 -*-
"""ocr+spacing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QEOIBpfdAVo16SeFLQ_e_L2tg5Wuq_O-

#OCR 구현
"""

!pip install opencv-contrib-python
!pip install requests

import numpy as np
import platform
from PIL import ImageFont, ImageDraw, Image
from matplotlib import pyplot as plt

import uuid
import json
import time
import cv2
import requests

# 드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')

def plt_imshow(title='image', img=None, figsize=(8 ,5)):
    plt.figure(figsize=figsize)

    if type(img) == list:
        if type(title) == list:
            titles = title
        else:
            titles = []

            for i in range(len(img)):
                titles.append(title)

        for i in range(len(img)):
            if len(img[i].shape) <= 2:
                rgbImg = cv2.cvtColor(img[i], cv2.COLOR_GRAY2RGB)
            else:
                rgbImg = cv2.cvtColor(img[i], cv2.COLOR_BGR2RGB)

            plt.subplot(1, len(img), i + 1), plt.imshow(rgbImg)
            plt.title(titles[i])
            plt.xticks([]), plt.yticks([])

        plt.show()
    else:
        if len(img.shape) < 3:
            rgbImg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
        else:
            rgbImg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        plt.imshow(rgbImg)
        plt.title(title)
        plt.xticks([]), plt.yticks([])
        plt.show()

def put_text(image, text, x, y, color=(0, 255, 0), font_size=22):
    if type(image) == np.ndarray:
        color_converted = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(color_converted)

    if platform.system() == 'Darwin':
        font_name = 'AppleGothic.ttf'
    elif platform.system() == 'Windows':
        font_name = 'malgun.ttf'
    else:
        font_name = None

    if font_name is not None:
        image_font = ImageFont.truetype(font_name, font_size)
        draw = ImageDraw.Draw(image)
        draw.text((x, y), text, font=image_font, fill=color)

    numpy_image = np.array(image)
    opencv_image = cv2.cvtColor(numpy_image, cv2.COLOR_RGB2BGR)

    return opencv_image

api_url = 'https://0b521u2xma.apigw.ntruss.com/custom/v1/23685/6547879a509c5fc42b8734b944f490817faf0495b7d8fbb0639dfed2bcf45ace/general'
secret_key = '개인_고유키번호' # 고유키 입력

path='image_path' # 이미지 경로 입력
files = [('file', open(path,'rb'))]

request_json = {'images': [{'format': 'jpg',
                                'name': 'demo'
                               }],
                    'requestId': str(uuid.uuid4()),
                    'version': 'V2',
                    'timestamp': int(round(time.time() * 1000))
                   }

payload = {'message': json.dumps(request_json).encode('UTF-8')}

headers = {
  'X-OCR-SECRET': secret_key,
}

response = requests.request("POST", api_url, headers=headers, data=payload, files=files)
result = response.json()

import re

img = cv2.imread(path)
roi_img = img.copy()

output_text = ""

for field in result['images'][0]['fields']:
    text = field['inferText']
    vertices_list = field['boundingPoly']['vertices']
    pts = [tuple(vertice.values()) for vertice in vertices_list]
    topLeft = [int(_) for _ in pts[0]]
    topRight = [int(_) for _ in pts[1]]
    bottomRight = [int(_) for _ in pts[2]]
    bottomLeft = [int(_) for _ in pts[3]]

    cv2.line(roi_img, topLeft, topRight, (0,255,0), 2)
    cv2.line(roi_img, topRight, bottomRight, (0,255,0), 2)
    cv2.line(roi_img, bottomRight, bottomLeft, (0,255,0), 2)
    cv2.line(roi_img, bottomLeft, topLeft, (0,255,0), 2)
    roi_img = put_text(roi_img, text, topLeft[0], topLeft[1] - 10, font_size=30)
    output_text += text


output_text = re.sub(r'([.?!])\s+', r'\1\n', output_text)

with open("output.txt", "w") as file:
    file.write(output_text)
output_text= output_text.replace(" ", '') # 띄어쓰기를 다시 진행하기 위해 공백 제거
print(output_text)
plt_imshow(["Original", "ROI"], [img, roi_img], figsize=(16, 10))

"""# 띄어쓰기 모델"""

!pip install git+https://github.com/ssut/py-hanspell.git

from hanspell import spell_checker
split_output_text= re.split('[.?]+', output_text)
result= ""
for line in split_output_text:
  spelled_sent = spell_checker.check(line)
  hanspell_sent = spelled_sent.checked
  if(line != split_output_text[len(split_output_text)-1]):
    hanspell_sent += ".\n "
  result += hanspell_sent
print(result)